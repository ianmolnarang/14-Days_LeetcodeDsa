// Square of sorted array
// 977
class Solution
{
public:
    vector<int> sortedSquares(vector<int> &A)
    {
        vector<int> res(A.size());
        int l = 0, r = A.size() - 1;
        for (int k = A.size() - 1; k >= 0; k--)
        {
            if (abs(A[r]) > abs(A[l]))
                res[k] = A[r] * A[r--];
            else
                res[k] = A[l] * A[l++];
        }
        return res;
    }
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution
{
public:
    vector<int> sortedSquares(vector<int> &nums)
    {
        // two pointer approach
        int n = nums.size();
        vector<int> res(nums.size(), 0);
        // three pointers
        int left = 0;
        int right = n - 1;
        int ind = n - 1;
        //         while(i<=j){
        //         int val1 = nums[i] * nums[i] ;
        //             int val2 = nums[j] * nums[j] ;

        //             if(val1>val2){
        //                 res.push_back(ind)=val1;
        //                // res[ind]=val1 ;
        //                 i++ ;
        //                 ind-- ;
        //             }
        //             else{
        //                 res[ind]=val2 ;
        //                 j-- ;
        //                 ind-- ;
        //             }

        //             } return res ;
        for (int i = n - 1; i >= 0; i--)
        {
            if (abs(nums[left]) > nums[right])
            {
                res[i] = nums[left] * nums[left];
                left++;
            }
            else
            {
                res[i] = nums[right] * nums[right];
                right--;
            }
        }
        return res;
    }
};